generator client {
  provider = "prisma-client-js"
  output   = "../src/generated/prisma"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum Role {
  ADMIN
  STAFF
  CUSTOMER
}

enum BookingStatus {
  PENDING
  CONFIRMED
  CANCELLED
  COMPLETED
}

model User {
  id            String    @id @default(cuid())
  name          String?
  email         String?   @unique
  emailVerified DateTime?
  image         String?
  phone         String?
  role          Role      @default(CUSTOMER)
  passwordHash  String?
  createdAt     DateTime  @default(now())
  bookings      Booking[]
  accounts      Account[]
  sessions      Session[]
}

model Client {
  id        String    @id @default(cuid())
  name      String
  email     String?
  phone     String?
  notes     String?
  createdAt DateTime  @default(now())
  bookings  Booking[]
}

model Animator {
  id          String       @id @default(cuid())
  name        String
  phone       String?
  notes       String?
  createdAt   DateTime     @default(now())
  assignments Assignment[]
}

model Package {
  id            String    @id @default(cuid())
  name          String
  description   String?
  priceCents    Int
  includedBalls Int?
  durationMin   Int
  isPromo       Boolean   @default(false)
  isPublic      Boolean   @default(true)
  bookings      Booking[]
}

model Addon {
  id            String         @id @default(cuid())
  name          String
  priceCents    Int
  bookingAddons BookingAddon[]
}

model Resource {
  id        String    @id @default(cuid())
  name      String
  capacity  Int       @default(1)
  createdAt DateTime  @default(now())
  bookings  Booking[]
}

model Booking {
  id            String        @id @default(cuid())
  dateTimeStart DateTime
  dateTimeEnd   DateTime
  groupSize     Int
  customerName  String
  customerPhone String?
  customerEmail String?
  notes         String?
  status        BookingStatus @default(PENDING)
  depositCents  Int?
  nocturne      Boolean       @default(false)

  packageId String
  package   Package @relation(fields: [packageId], references: [id])

  clientId String?
  client   Client? @relation(fields: [clientId], references: [id])

  resourceId String?
  resource   Resource? @relation(fields: [resourceId], references: [id])

  userId String?
  user   User?   @relation(fields: [userId], references: [id])

  createdAt     DateTime       @default(now())
  bookingAddons BookingAddon[]
  assignments   Assignment[]

  @@index([dateTimeStart])
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?
  user              User    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model BookingAddon {
  bookingId String
  addonId   String
  quantity  Int     @default(1)
  booking   Booking @relation(fields: [bookingId], references: [id])
  addon     Addon   @relation(fields: [addonId], references: [id])

  @@id([bookingId, addonId])
}

model Assignment {
  id         String   @id @default(cuid())
  bookingId  String
  animatorId String
  booking    Booking  @relation(fields: [bookingId], references: [id])
  animator   Animator @relation(fields: [animatorId], references: [id])
}
